from flask import Flask, render_template, request, redirect, url_for, session, jsonify
import datetime
import numpy as np
import pandas as pd
import joblib
import os
import json
from dotenv import load_dotenv
import threading
import requests
import shap 
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Lock thread-safe
save_lock = threading.Lock()

def save_history_to_file(record):
    filename = "history_data.json"
    with save_lock:
        if os.path.exists(filename):
            with open(filename, "r") as f:
                try:
                    data = json.load(f)
                except json.JSONDecodeError:
                    data = []
        else:
            data = []

        data.append(record)
        with open(filename, "w") as f:
            json.dump(data, f, indent=2)

load_dotenv()
api_key = os.getenv("OPENROUTER_API_KEY")

def ask_openrouter(prompt):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "X-Title": "CervicalCancerPredictor"
    }

    payload = {
        "model": "google/gemma-3n-e2b-it:free",  # ho·∫∑c "mistralai/mixtral-8x7b" n·∫øu b·∫°n mu·ªën
        "messages": [{"role": "user", "content": prompt}]
    }

    try:
        response = requests.post(url, headers=headers, json=payload, timeout=20)

        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            return f"‚ùå L·ªói API ({response.status_code}): {response.text}"
    except requests.exceptions.Timeout:
        return "‚ùå L·ªói: Qu√° th·ªùi gian ph·∫£n h·ªìi t·ª´ OpenRouter."
    except Exception as e:
        return f"‚ùå L·ªói: {str(e)}"


from feature_advice import feature_advice

app = Flask(__name__)
app.secret_key = "super-secret-key"

feature_names = ['Age', 'Number of sexual partners', 'First sexual intercourse',
    'Num of pregnancies', 'Smokes', 'Smokes (years)', 'Smokes (packs/year)',
    'Hormonal Contraceptives', 'Hormonal Contraceptives (years)', 'IUD',
    'IUD (years)', 'STDs', 'STDs (number)', 'STDs:condylomatosis',
    'STDs:cervical condylomatosis', 'STDs:vaginal condylomatosis',
    'STDs:vulvo-perineal condylomatosis', 'STDs:syphilis',
    'STDs:pelvic inflammatory disease', 'STDs:genital herpes',
    'STDs:molluscum contagiosum', 'STDs:AIDS', 'STDs:HIV',
    'STDs:Hepatitis B', 'STDs:HPV', 'STDs: Number of diagnosis',
    'Dx:Cancer', 'Dx:CIN', 'Dx:HPV', 'Dx', 'Hinselmann', 'Schiller', 'Citology']

label_mapping = {
    "Age": "Tu·ªïi", "Number of sexual partners": "S·ªë b·∫°n t√¨nh", "First sexual intercourse": "Tu·ªïi quan h·ªá l·∫ßn ƒë·∫ßu",
    "Num of pregnancies": "S·ªë l·∫ßn mang thai", "Smokes": "H√∫t thu·ªëc", "Smokes (years)": "S·ªë nƒÉm h√∫t thu·ªëc",
    "Smokes (packs/year)": "S·ªë g√≥i m·ªói nƒÉm", "Hormonal Contraceptives": "D√πng thu·ªëc tr√°nh thai",
    "Hormonal Contraceptives (years)": "S·ªë nƒÉm d√πng thu·ªëc tr√°nh thai", "IUD": "ƒê·∫∑t v√≤ng",
    "IUD (years)": "S·ªë nƒÉm ƒë·∫∑t v√≤ng", "STDs": "T·ª´ng m·∫Øc STDs", "STDs (number)": "S·ªë l·∫ßn m·∫Øc STDs",
    "STDs:condylomatosis": "S√πi m√†o g√†", "STDs:cervical condylomatosis": "S√πi m√†o g√† c·ªï t·ª≠ cung",
    "STDs:vaginal condylomatosis": "S√πi m√†o g√† √¢m ƒë·∫°o", "STDs:vulvo-perineal condylomatosis": "S√πi m√†o g√† √¢m h·ªô - t·∫ßng sinh m√¥n",
    "STDs:syphilis": "B·ªánh giang mai", "STDs:pelvic inflammatory disease": "Vi√™m v√πng ch·∫≠u",
    "STDs:genital herpes": "M·ª•n r·ªôp sinh d·ª•c", "STDs:molluscum contagiosum": "U m·ªÅm l√¢y",
    "STDs:AIDS": "AIDS", "STDs:HIV": "HIV", "STDs:Hepatitis B": "Vi√™m gan B", "STDs:HPV": "Nhi·ªÖm HPV",
    "STDs: Number of diagnosis": "S·ªë l·∫ßn ƒë∆∞·ª£c ch·∫©n ƒëo√°n STDs", "Dx:Cancer": "Ch·∫©n ƒëo√°n ung th∆∞",
    "Dx:CIN": "Ch·∫©n ƒëo√°n CIN", "Dx:HPV": "Ch·∫©n ƒëo√°n HPV", "Dx": "Ch·∫©n ƒëo√°n b·∫•t th∆∞·ªùng",
    "Hinselmann": "Hinselmann d∆∞∆°ng t√≠nh", "Schiller": "Schiller d∆∞∆°ng t√≠nh", "Citology": "T·∫ø b√†o h·ªçc d∆∞∆°ng t√≠nh"
}

model = joblib.load("random_forest_model.pkl")
print("‚úÖ ƒê√£ load m√¥ h√¨nh:", type(model))
explainer = shap.TreeExplainer(model)  # ƒë·∫∑t ·ªü ngo√†i
# def generate_advice_simple(proba):
#     if proba >= 25:
#         return (
#             "üî¥ C·∫¢NH B√ÅO: C√≥ nguy c∆° ti·ªÅm ·∫©n.\n\n"
#             "üí° Khuy·∫øn ngh·ªã:\n"
#             "‚Ä¢ Tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa\n"
#             "‚Ä¢ Ti·∫øn h√†nh x√©t nghi·ªám Pap smear ho·∫∑c HPV n·∫øu ch∆∞a l√†m\n"
#             "‚Ä¢ Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh\n"
#             "‚Ä¢ Tr√°nh thu·ªëc l√°, h·∫°n ch·∫ø r∆∞·ª£u bia\n"
#             "‚Ä¢ Ti√™m vaccine HPV n·∫øu ch∆∞a ti√™m\n"
#             "‚ù§Ô∏è S·ª©c kh·ªèe c·ªßa b·∫°n l√† ƒëi·ªÅu quan tr·ªçng nh·∫•t."
#         )
#     else:
#         return (
#             "‚úÖ B·∫°n hi·ªán kh√¥ng c√≥ nguy c∆° ƒë√°ng k·ªÉ.\n\n"
#             "üí° G·ª£i √Ω:\n"
#             "‚Ä¢ Kh√°m ph·ª• khoa ƒë·ªãnh k·ª≥\n"
#             "‚Ä¢ Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh\n"
#             "‚Ä¢ Tr√°nh h√∫t thu·ªëc, h·∫°n ch·∫ø r∆∞·ª£u bia\n"
#             "‚Ä¢ Tham kh·∫£o ti√™m vaccine HPV n·∫øu ch∆∞a ti√™m\n"
#             "‚ù§Ô∏è Ch√∫c b·∫°n lu√¥n kho·∫ª m·∫°nh."
#         )

# @app.route("/", methods=["GET", "POST"])
# def index():
#     if request.method == "POST":
#         try:
#             input_dict = dict.fromkeys(feature_names, np.nan)
#             for name in feature_names:
#                 raw_val = request.form.get(name)
#                 try:
#                     input_dict[name] = float(raw_val)
#                 except (TypeError, ValueError):
#                     pass

#             # N·∫øu t·∫•t c·∫£ ƒë·ªÅu r·ªóng
#             if pd.DataFrame([input_dict]).isna().all(axis=1).values[0]:
#                 return "‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt gi√° tr·ªã v√†o bi·ªÉu m·∫´u."

#             X_input = pd.DataFrame([input_dict], columns=feature_names).fillna(0)
#             X_input = X_input[model.feature_names_in_]

#             prediction = model.predict(X_input)[0]
#             proba = model.predict_proba(X_input)[0][1] * 100
#             advice = generate_advice_simple(proba)

#             # ‚úÖ T·∫°o extra_insight t·ª´ input v√† feature_advice
#             extra_insight = ""
#             for name in feature_names:
#                 val = input_dict[name]
#                 if val and name in feature_advice:
#                     vi_name = label_mapping.get(name, name)
#                     desc = feature_advice[name].get("desc", "")
#                     action = feature_advice[name].get("action", "")
#                     extra_insight += f"‚Ä¢ {vi_name} = {val}\n  {desc}\n  üëâ {action}\n\n"

#             record = {
#                 "input": {k: request.form.get(k) for k in feature_names},
#                 "result": int(prediction),
#                 "proba": round(proba, 2),
#                 "advice": advice,
#                 "timestamp": datetime.datetime.now().strftime("%d-%m-%Y %H:%M")
#             }

#             if "history" not in session:
#                 session["history"] = []
#             session["history"].append(record)
#             session.modified = True
#             save_history_to_file(record)

#             return render_template("index.html", features=feature_names,
#                                    result=prediction, proba=round(proba, 2),
#                                    advice=advice, extra_insight=extra_insight)
#         except Exception as e:
#             return f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {e}"
#     return render_template("index.html", features=feature_names, result=None)


@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        try:
            input_dict = dict.fromkeys(feature_names, np.nan)
            for name in feature_names:
                raw_val = request.form.get(name)
                try:
                    input_dict[name] = float(raw_val)
                except (TypeError, ValueError):
                    pass

            if pd.DataFrame([input_dict]).isna().all(axis=1).values[0]:
                return "‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt gi√° tr·ªã v√†o bi·ªÉu m·∫´u."

            # D·ª± ƒëo√°n
            X_input = pd.DataFrame([input_dict], columns=feature_names).fillna(0)
            X_input = X_input[model.feature_names_in_]
            prediction = model.predict(X_input)[0]
            proba = model.predict_proba(X_input)[0][1] * 100

            # Sinh l·ªùi khuy√™n ch√≠nh
            if proba >= 25:
                advice = (
                    "üî¥ C·∫¢NH B√ÅO: C√≥ nguy c∆° ti·ªÅm ·∫©n.\n\n"
                    "üí° Khuy·∫øn ngh·ªã:\n"
                    "‚Ä¢ Tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa\n"
                    "‚Ä¢ Ti·∫øn h√†nh x√©t nghi·ªám Pap smear ho·∫∑c HPV n·∫øu ch∆∞a l√†m\n"
                    "‚Ä¢ Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh\n"
                    "‚Ä¢ Tr√°nh thu·ªëc l√°, h·∫°n ch·∫ø r∆∞·ª£u bia\n"
                    "‚Ä¢ Ti√™m vaccine HPV n·∫øu ch∆∞a ti√™m\n"
                    "‚ù§Ô∏è S·ª©c kh·ªèe c·ªßa b·∫°n l√† ƒëi·ªÅu quan tr·ªçng nh·∫•t."
                )
            else:
                advice = (
                    "‚úÖ B·∫°n hi·ªán kh√¥ng c√≥ nguy c∆° ƒë√°ng k·ªÉ.\n\n"
                    "üí° G·ª£i √Ω:\n"
                    "‚Ä¢ Kh√°m ph·ª• khoa ƒë·ªãnh k·ª≥\n"
                    "‚Ä¢ Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh\n"
                    "‚Ä¢ Tr√°nh h√∫t thu·ªëc, h·∫°n ch·∫ø r∆∞·ª£u bia\n"
                    "‚Ä¢ Tham kh·∫£o ti√™m vaccine HPV n·∫øu ch∆∞a ti√™m\n"
                    "‚ù§Ô∏è Ch√∫c b·∫°n lu√¥n kho·∫ª m·∫°nh."
                )

            # Ph√¢n t√≠ch t·ª´ c√°c ƒë·∫∑c tr∆∞ng nguy c∆° (d·ª±a tr√™n threshold)
            extra_insight = ""
            for name in feature_names:
                val = input_dict[name]
                if pd.notna(val) and name in feature_advice:
                    threshold = feature_advice[name].get("threshold", 0)
                    if val >= threshold:
                        vi_name = label_mapping.get(name, name)
                        desc = feature_advice[name].get("desc", "")
                        action = feature_advice[name].get("action", "")
                        extra_insight += f"‚Ä¢ {vi_name} = {val}\n  {desc}\n  üëâ {action}\n\n"
                    elif "desc_low" in feature_advice[name]:
                        vi_name = label_mapping.get(name, name)
                        desc = feature_advice[name].get("desc_low", "")
                        action = feature_advice[name].get("action_low", "")
                        extra_insight += f"‚Ä¢ {vi_name} = {val}\n  {desc}\n  üëâ {action}\n\n"

            # Ph√¢n t√≠ch b·ªï sung t·ª´ OpenRouter (n·∫øu c·∫ßn)
            try:
                extra_ai = ask_openrouter(f"H√£y ph√¢n t√≠ch l·ªùi khuy√™n y khoa sau b·∫±ng ti·∫øng Vi·ªát:\n{advice}")
            except:
                extra_ai = ""

            # L∆∞u l·ªãch s·ª≠
            record = {
                "input": {k: request.form.get(k) for k in feature_names},
                "result": int(prediction),
                "proba": round(proba, 2),
                "advice": advice,
                "timestamp": datetime.datetime.now().strftime("%d-%m-%Y %H:%M")
            }

            if "history" not in session:
                session["history"] = []
            session["history"].append(record)
            session.modified = True
            save_history_to_file(record)

            return render_template("index.html",
                                   features=feature_names,
                                   result=prediction,
                                   proba=round(proba, 2),
                                   advice=advice,
                                   extra_insight=extra_insight + extra_ai)
        except Exception as e:
            return f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {e}"

    return render_template("index.html", features=feature_names, result=None)


@app.route("/ask", methods=["POST"])
def ask():
    try:
        data = request.get_json()
        prompt = data.get("prompt", "")
        if not prompt.strip():
            return jsonify({"reply": "‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi h·ª£p l·ªá."})
        reply = ask_openrouter(prompt)
        return jsonify({"reply": reply})
    except Exception as e:
        return jsonify({"reply": f"L·ªói: {e}"})


@app.route("/monitor")
def monitor():
    try:
        with open("history_data.json", "r") as f:
            history = json.load(f)
    except FileNotFoundError:
        history = []

    # L·∫•y nh√£n th·ªùi gian v√† x√°c su·∫•t t∆∞∆°ng ·ª©ng
    labels = [entry.get("timestamp", f"L·∫ßn {i+1}") for i, entry in enumerate(history)]
    probabilities = [entry.get("proba", 0) for entry in history]

    return render_template("monitor.html",
                           labels=labels,
                           probabilities=probabilities,
                           history=history)



@app.route("/predict", methods=["POST"])
def predict():
    return redirect(url_for("index"))

@app.route('/history')
def history():
    try:
        with open("history_data.json", "r") as f:
            history = json.load(f)
    except FileNotFoundError:
        history = []
    return render_template("history.html", history=history, label_mapping=label_mapping)

@app.route("/clear_history")
def clear_history():
    session.pop("history", None)
    if os.path.exists("history_data.json"):
        os.remove("history_data.json")
    return redirect(url_for("monitor"))

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
